import { injectQuery as __vite__injectQuery } from "/note/@vite/client";import.meta.env = {"BASE_URL":"/note/","MODE":"development","DEV":true,"PROD":false,"SSR":false};import { createApp as createClientApp, createSSRApp, defineComponent, h, onMounted, watch } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.vite/deps/vue.js?v=8debaa71';
import Theme from '/note/.vitepress/theme/index.ts';
import { inBrowser, pathToFile } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/utils.js?v=8debaa71';
import { RouterSymbol, createRouter } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/router.js?v=8debaa71';
import { siteDataRef, useData } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/data.js?v=8debaa71';
import { useUpdateHead } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/composables/head.js?v=8debaa71';
import { usePrefetch } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/composables/preFetch.js?v=8debaa71';
import { dataSymbol, initData } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/data.js?v=8debaa71';
import { Content } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/components/Content.js?v=8debaa71';
import { ClientOnly } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/components/ClientOnly.js?v=8debaa71';
import { useCopyCode } from '/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/composables/copyCode.js?v=8debaa71';
const NotFound = Theme.NotFound || (() => '404 Not Found');
const VitePressApp = defineComponent({
    name: 'VitePressApp',
    setup() {
        const { site } = useData();
        // change the language on the HTML element based on the current lang
        onMounted(() => {
            watch(() => site.value.lang, (lang) => {
                document.documentElement.lang = lang;
            }, { immediate: true });
        });
        if (import.meta.env.PROD) {
            // in prod mode, enable intersectionObserver based pre-fetch
            usePrefetch();
        }
        // setup global copy code handler
        useCopyCode();
        if (Theme.setup)
            Theme.setup();
        return () => h(Theme.Layout);
    }
});
export function createApp() {
    const router = newRouter();
    const app = newApp();
    app.provide(RouterSymbol, router);
    const data = initData(router.route);
    app.provide(dataSymbol, data);
    // provide this to avoid circular dependency in VPContent
    app.provide('NotFound', NotFound);
    // install global components
    app.component('Content', Content);
    app.component('ClientOnly', ClientOnly);
    // expose $frontmatter
    Object.defineProperty(app.config.globalProperties, '$frontmatter', {
        get() {
            return data.frontmatter.value;
        }
    });
    if (Theme.enhanceApp) {
        Theme.enhanceApp({
            app,
            router,
            siteData: siteDataRef
        });
    }
    // setup devtools in dev mode
    if (import.meta.env.DEV || __VUE_PROD_DEVTOOLS__) {
        import("/note/@fs/D:/zgh/github/vitepress-note/node_modules/.pnpm/vitepress@1.0.0-alpha.29_ykm4ojutpouqv732lbt3277njm/node_modules/vitepress/dist/client/app/devtools.js?v=8debaa71").then(({ setupDevtools }) => setupDevtools(app, router, data));
    }
    return { app, router, data };
}
function newApp() {
    return import.meta.env.PROD
        ? createSSRApp(VitePressApp)
        : createClientApp(VitePressApp);
}
function newRouter() {
    let isInitialPageLoad = inBrowser;
    let initialPath;
    return createRouter((path) => {
        let pageFilePath = pathToFile(path);
        if (isInitialPageLoad) {
            initialPath = pageFilePath;
        }
        // use lean build if this is the initial page load or navigating back
        // to the initial loaded path (the static vnodes already adopted the
        // static content on that load so no need to re-fetch the page)
        if (isInitialPageLoad || initialPath === pageFilePath) {
            pageFilePath = pageFilePath.replace(/\.js$/, '.lean.js');
        }
        if (inBrowser) {
            isInitialPageLoad = false;
        }
        return import(/*@vite-ignore*/ __vite__injectQuery(pageFilePath, 'import'));
    }, NotFound);
}
if (inBrowser) {
    const { app, router, data } = createApp();
    // wait until page component is fetched before mounting
    router.go().then(() => {
        // dynamically update head tags
        useUpdateHead(router.route, data.site);
        app.mount('#app');
    });
}
